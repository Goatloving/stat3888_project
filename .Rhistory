knitr::opts_chunk$set(echo = TRUE)
load(tech_data.Rdata)
pwd
getwd
getwd()
load(tech_data.Rdata)
load(tech_data.Rdata)
getwd()
setwd()
setwd(C:/Users/Yang/OneDrive/~STUDY/Usyd/2021S2/STAT3888/Major project/Major)
setwd(C:\Users\Yang\OneDrive\~STUDY\Usyd\2021S2\STAT3888\Major project\Major)
knitr::opts_chunk$set(echo = TRUE)
load(tech_data.Rdata)
load(tech_data.Rdata)
raw_biom <- read.csv(here("AHS11biomedical.csv"), header=TRUE)
install.packages('here')
knitr::opts_chunk$set(echo = TRUE)
# Load in all libraries
library(tidyverse)
install.packages('tidyverse')
install.packages('dplyr')
install.packages('ggplot2')
# Load in all libraries
library(tidyverse)
library(here)      # directory referencing
library(readxl)    # reading Excel files
library(janitor)   # data cleaning
install.packages('janitor')
# Load in all libraries
library(tidyverse)
library(here)      # directory referencing
library(readxl)    # reading Excel files
library(janitor)   # data cleaning
library(stringr)   # string manimpuation
library(tidyr)     # new tidy functions
raw_biom <- read.csv(here("AHS11biomedical.csv"), header=TRUE)
raw_nutr <- read.csv(here("AHS11nutrient.csv"), header=TRUE)
raw_food <- read.csv(here("AHS11food.csv"), header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load in all libraries
library(tidyverse)
library(here)      # directory referencing
library(readxl)    # reading Excel files
library(janitor)   # data cleaning
library(stringr)   # string manimpuation
library(tidyr)     # new tidy functions
raw_biom <- read.csv(here("AHS11biomedical.csv"), header=TRUE)
raw_nutr <- read.csv(here("AHS11nutrient.csv"), header=TRUE)
raw_food <- read.csv(here("AHS11food.csv"), header=TRUE)
quiet_read <- purrr::quietly(readxl::read_excel)
dict_biom <- quiet_read(here("data","nutmstatDataItems2019.xlsx"),sheet=1)$result
save(tech_biom, dict_biom, types_biom,
tech_nutr, dict_nutr, types_nutr,
tech_food, dict_nutr, types_food,
file = "tech_data.Rdata")
knitr::opts_chunk$set(echo = TRUE)
# Load in all libraries
library(tidyverse)
library(here)      # directory referencing
library(readxl)    # reading Excel files
library(janitor)   # data cleaning
library(stringr)   # string manimpuation
library(tidyr)     # new tidy functions
raw_biom <- read.csv(here("AHS11biomedical.csv"), header=TRUE)
raw_nutr <- read.csv(here("AHS11nutrient.csv"), header=TRUE)
raw_food <- read.csv(here("AHS11food.csv"), header=TRUE)
quiet_read <- purrr::quietly(readxl::read_excel)
dict_biom <- quiet_read("nutmstatDataItems2019.xlsx"),sheet=1)$result
dict_biom <- quiet_read("nutmstatDataItems2019.xlsx",sheet=1)$result
dict_nutr <- quiet_read("nutmstatDataItems2019.xlsx",sheet=2)$result
dict_food <- quiet_read("nutmstatDataItems2019.xlsx",sheet=3)$result
dict_biom <- dict_biom %>% janitor::clean_names() %>% rename(extra=x3)
dict_nutr <- dict_nutr %>% janitor::clean_names() %>% rename(extra1=x3,extra2=x4)
dict_food <- dict_food %>% janitor::clean_names() %>% rename(extra=x3)
# Remove any empty rows
dict_biom <- dict_biom %>% janitor::remove_empty("rows")
dict_nutr <- dict_nutr %>% janitor::remove_empty("rows")
dict_food <- dict_food %>% janitor::remove_empty("rows")
# Remove any empty rows
biom_readable <- dict_biom %>%
filter(!is.na(variable_name))
nutr_readable <- dict_nutr %>%
filter(!is.na(variable_name)) %>%
distinct() # Removes 1 duplicate
food_readable <- dict_food %>%
filter(!is.na(variable_name)) %>%
distinct()
# Remove any empty rows
dict_biom <- dict_biom %>% tidyr::fill(variable_name)
dict_nutr <- dict_nutr %>% tidyr::fill(variable_name)
dict_food <- dict_food %>% tidyr::fill(variable_name)
get_type <- function(dict)
{
#dict <- dict_nutr
var_names <- unique(dict$variable_name)
var_type  <- c()
for (j in 1:length(var_names))
{
# Get all dictionary lines corresponding to a varible
# (a block of lines)
dict_block <- dict %>%
filter(variable_name==var_names[j])
# Take all of the characters in a block, paste them
# together and make all characters lower case
block_string <- dict_block %>%
select(-variable_name) %>%
as.matrix() %>%
as.vector() %>%
paste(collapse="") %>%
tolower()
# Assign variable if we can find the word "continuous"
# in the block otherwise assume that it is "categorical"
var_type[j] <- block_string %>%
str_detect("continuous") %>%
ifelse("continuous","categorical")
}
return(var_type)
}
tib1 <- tibble(variable_type=get_type(dict_biom))
tib2 <- tibble(variable_type=rep("continuous",nrow(nutr_readable)))
tib3 <- tibble(variable_type=get_type(dict_food))
# Create a new tibble that takes the readable tibble,
# appends the variable type, and do some minor fixing
types_biom <- bind_cols(biom_readable, tib1) %>%
mutate(variable_type=ifelse(variable_name%in%c("ABSPID","ABSHID"), "string",variable_type))
types_nutr <- bind_cols(nutr_readable, tib2) %>%
mutate(variable_type=ifelse(variable_name%in%c("ABSPID","ABSHID"), "string",variable_type))
types_food <- bind_cols(food_readable, tib3) %>%
mutate(variable_type=ifelse(variable_name%in%c("ABSPID","ABSHID"), "string",variable_type))
get_special_value_meanings <- function(dict)
{
var_names <- unique(dict$variable_name)
special   <- tibble(variable_name=c(),
value=c(),
meaning=c())
for (j in 1:length(var_names))
{
# Get a block of values from the dictionary
block <-  dict %>%
filter(variable_name==var_names[j])
if (nrow(block)>1) {
# Split  the descrition into value/meaning pairs
special_block <- block[-1,-c(3:ncol(block))] %>%
dplyr::filter(!grepl("continuous",tolower(description))) %>%
separate(col=2,
sep="[.]",
into=c("value","meaning")) %>%
mutate(value=as.numeric(value),
meaning=tolower(str_trim(meaning)))
# append these to a block of special value/meaning pairs
special <- bind_rows(special, special_block)
}
}
return(special)
}
special_biom <- get_special_value_meanings(dict_biom)
special_nutr <- get_special_value_meanings(dict_nutr) %>% na.omit()
special_food <- get_special_value_meanings(dict_food) %>% na.omit()
get_special_value_meanings <- function(dict)
{
var_names <- unique(dict$variable_name)
special   <- tibble(variable_name=c(),
value=c(),
meaning=c())
for (j in 1:length(var_names))
{
# Get a block of values from the dictionary
block <-  dict %>%
filter(variable_name==var_names[j])
if (nrow(block)>1) {
# Split  the descrition into value/meaning pairs
special_block <- block[-1,-c(3:ncol(block))] %>%
dplyr::filter(!grepl("continuous",tolower(description))) %>%
separate(col=2,
sep="[.]",
into=c("value","meaning")) %>%
mutate(value=as.numeric(value),
meaning=tolower(str_trim(meaning)))
# append these to a block of special value/meaning pairs
special <- bind_rows(special, special_block)
}
}
return(special)
}
special_biom <- get_special_value_meanings(dict_biom)
special_nutr <- get_special_value_meanings(dict_nutr) %>% na.omit()
special_food <- get_special_value_meanings(dict_food) %>% na.omit()
tib1 <- tibble(variable_type=get_type(dict_biom))
tib2 <- tibble(variable_type=rep("continuous",nrow(nutr_readable)))
tib3 <- tibble(variable_type=get_type(dict_food))
# Create a new tibble that takes the readable tibble,
# appends the variable type, and do some minor fixing
types_biom <- bind_cols(biom_readable, tib1) %>%
mutate(variable_type=ifelse(variable_name%in%c("ABSPID","ABSHID"), "string",variable_type))
types_nutr <- bind_cols(nutr_readable, tib2) %>%
mutate(variable_type=ifelse(variable_name%in%c("ABSPID","ABSHID"), "string",variable_type))
types_food <- bind_cols(food_readable, tib3) %>%
mutate(variable_type=ifelse(variable_name%in%c("ABSPID","ABSHID"), "string",variable_type))
proc_food <- raw_food %>%
select(-ABSLFID,
-ABSBID,
-ABSSID,
-ABSFID)
categorical_to_factor <- function(types, proc)
{
var_names <- colnames(proc)
for (i in 1:length(var_names))
{
# Extract the inferred variable type from the types tibble
var_type <- types %>%
filter(variable_name==var_names[i]) %>%
select(variable_type) %>%
as.character()
# If the type is categorical turn the variable into a factor
if (var_type=="categorical") {
proc[[var_names[i]]] <- as.factor(proc[[var_names[i]]])
}
}
return(proc)
}
proc_biom <- categorical_to_factor(types_biom,raw_biom)
proc_nutr <- categorical_to_factor(types_nutr,raw_nutr)
proc_food <- categorical_to_factor(types_food,proc_food)
miss_defs <- c("not applicable",
"measurement not taken - equipment faulty",
"measurement not taken - other reason",
"measurement not taken - refusal",
"not collected",
"not determined",
"not known",
"not known if currently on a diet",
"not measured",
"not reported",
"not stated",
"not used")
raw_to_tech <- function(proc, special, types)
{
var_names <- colnames(proc)
for (j in 1:length(var_names))
{
var_val <- var_names[j]
specials <- special %>%
filter(variable_name==var_val)
if (nrow(specials)>0)
{
ind <- which(var_names==var_val)
var_miss_str  <- paste0(var_val,"_MISS")
var_miss_reas <- rep("observed",nrow(proc))
var_vals      <- proc[,ind]
var_type <- types %>%
filter(variable_name==var_val) %>%
select(variable_type) %>%
as.character()
if (var_type=="continuous") {
for (i in 1:length(var_vals)) {
if (var_vals[i] %in% specials$value) {
ind2 <- which(var_vals[i]==specials$value)
var_vals[i]      <- NA
var_miss_reas[i] <- specials[ind2,3] %>% as.character()
}
}
}
if (var_type=="categorical") {
for (i in 1:length(var_vals)) {
spec_val  <- specials$value
spec_meam <- specials$meaning
if (var_vals[i] %in% spec_val)
{
var_mean <- spec_meam[var_vals[i] == spec_val]
if (var_mean %in% miss_defs) {
var_vals[i]      <- NA
var_miss_reas[j] <- var_mean
}
} else {
var_vals[i]      <- NA
var_miss_reas[i] <- "unknown"
}
}
}
if (any(is.na(var_vals))) {
proc[,ind] <- var_vals
proc$dummy <- var_miss_reas
colnames(proc)[ncol(proc)] <- var_miss_str
}
}
}
return(proc)
}
tech_biom <- raw_to_tech(proc_biom, special_biom, types_biom)
tech_nutr <- raw_to_tech(proc_nutr, special_nutr, types_nutr)
tech_food <- raw_to_tech(proc_food, special_food, types_food)
knitr::opts_chunk$set(echo = TRUE)
dat_ad25 <- dat %>% filter(dat$AGEC >= 18 & dat$AGEC <= 25) # adolescents 18-25
knitr::opts_chunk$set(echo = TRUE)
load("tech_data.Rdata") # load cleaned data from John's code
library(tidyverse)
library(here)      # directory referencing
library(readxl)    # reading Excel files
library(janitor)   # data cleaning
library(stringr)   # string manipulation
library(tidyr)     # new tidy functions
library(knitr) # kable
library(modi) # ok for multivariate outlier detection
library(caret)# low variance filter
# missing values
library(naniar)
library(knitr)
library(ggpubr) # ggplot arrangement
#ploting
library(Rmisc)
library(plyr)
library(gridExtra)
library(egg)
library(kableExtra)
# select columns related to "Caffeine" and "sugar" in nutrition data
caff_nutr <- tech_nutr %>% select(contains("CAFF"))
sug_nutr <- tech_nutr %>% select(contains("SUG"))
fat_nutr <- tech_nutr %>% select(contains("FAT"))
nutr <- cbind(sug_nutr, caff_nutr, fat_nutr) # combine data
# select columns related to "Caffeine" in food data
caff_food <- tech_food %>% select(contains("CAFF"))
sug_food <- tech_food %>% select(contains("SUG"))
food <- cbind(sug_food, caff_food) # food contains much longer data so cannot be combined with the rest
# select colums related to obesity from biom data
obes_biom <- tech_biom %>% select(ABSPID, BMISC, PHDCMWBC, AGEC, EXLWTBC, EXLWMBC, EXLWVBC)
# combine together
dat <- cbind(obes_biom, nutr)
# kable(miss_var_summary(tech_biom),digits=2, format="html")
dat$bmi_high <- ifelse(dat$BMISC > 30, 1, 0)
dat$waist_high <- ifelse(dat$PHDCMWBC > 80, 1, 0)
dat$bmi_high <- factor(dat$bmi_high)
dat$waist_high <- factor(dat$waist_high)
dat$EXLWMBC_num <- as.numeric(as.character(dat$EXLWMBC))
dat$EXLWTBC_num <- as.numeric(as.character(dat$EXLWTBC))
dat$EXLWVBC_num <- as.numeric(as.character(dat$EXLWVBC))
dat$total_exec <- sum(dat$EXLWMBC_num, dat$EXLWTBC_num, dat$EXLWVBC_num)
dat_ad19 <- dat %>% filter(dat$AGEC >= 10 & dat$AGEC <= 19) # adolescents 10-19
dat_ad25 <- dat %>% filter(dat$AGEC >= 18 & dat$AGEC <= 25) # adolescents 18-25
esquisse:::esquisser()
p1<- ggplot(dat_ad25) +
aes(x = CAFFT1, y = SUGART1) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
theme_minimal()
p2<- ggplot(dat_ad25) +
aes(x = CAFFT1, y = FATT1) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
theme_minimal()
ggarrange(p1,p2, ncol=2)
p3<- ggplot(dat_ad25) +
aes(x = CAFFT2, y = SUGART2) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
theme_minimal()
p4<- ggplot(dat_ad25) +
aes(x = CAFFT2, y = FATT2) +
geom_point(shape = "circle", size = 1.5, colour = "#112446") +
theme_minimal()
ggarrange(p3,p4, ncol=2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
View(food)
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
load("tech_data.Rdata") # load cleaned data from John's code
install.packages('tidyverse')
library(tidyverse)
library(tidyverse)
library(here)      # directory referencing
install.packages('here')
install.packages('here')
install.packages('readxl')
install.packages('janitor')
install.packages('tidyr')
install.packages('stringr')
install.packages('modi')
install.packages('caret')
install.packages('naiar')
install.packages('ggplot2')
install.packages('naniar')
install.packages('ggpubr')
install.packages('gridExtra')
install.packages('kableExtra')
library(tidyverse)
library(here)      # directory referencing
library(readxl)    # reading Excel files
library(janitor)   # data cleaning
library(stringr)   # string manipulation
library(tidyr)     # new tidy functions
library(knitr) # kable
library(modi) # ok for multivariate outlier detection
library(caret)# low variance filter
# missing values
library(naniar)
library(knitr)
library(ggpubr) # ggplot arrangement
#ploting
library(gridExtra)
library(kableExtra)
renv::snapshot()
knitr::opts_chunk$set(echo = TRUE)
#renv::snapshot()
#renv::restore()
library(tidyverse)
library(here)      # directory referencing
library(readxl)    # reading Excel files
library(janitor)   # data cleaning
library(stringr)   # string manipulation
library(tidyr)     # new tidy functions
library(knitr) # kable
library(modi) # ok for multivariate outlier detection
library(caret)# low variance filter
# missing values
library(naniar)
library(knitr)
library(ggpubr) # ggplot arrangement
#ploting
library(gridExtra)
library(kableExtra)
library(kableExtra)
install.packages("esquisse")
install.packages("ggThemeAssist")
install.packages("datapasta")
renv::snapshot()
