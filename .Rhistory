# generate tidy version data
for (i in 1:length(cp_i)){
new_sub_df_name = paste0("subframe", i)
sub = cp_df[,(2*i-1):(2*i)]
names(sub)<-c("time", "potential")
sub[,1]=sub[,1]-sub[1,1]
sub<-na.omit(sub)
sub<-mutate(sub, current = cp_i[i])
sub$current=as.factor(sub$current)
assign(new_sub_df_name, sub)
}
tidy_dat<-rbind(subframe1,subframe2,subframe3,subframe4,subframe5)
# plot data
ggplot(data = tidy_dat, aes(x=time, y=potential, color = current))+
geom_point(size=1)+
geom_line(aes(group=current),size=1.5)+
theme_bw()
# calculation
cp_results <- as.data.frame(matrix(nrow = length(cp_i), ncol=5))
names(cp_results)<-c("Current","Capacitance","Areal","Weight","Volume")
for (i in 1:length(cp_i)){
a<-tidy_dat[which(tidy_dat$current==cp_i[i]),]
max_potential<-max(a$potential)
max_time<-tidy_dat[which(tidy_dat$potential==max_potential),]$time
last_index<-nrow(a)
min_time<-a[last_index,1]
cap_cp <- (min_time-max_time)*cp_i[i]/(cp_v[2]-cp_v[1])/1000
cp_results[i,1]=cp_i[i]
cp_results[i,2]=cap_cp
cp_results[i,3]=cap_cp/size
cp_results[i,4]=cap_cp/weight
cp_results[i,5]=cap_cp/volume
}
ggplot(data=cp_results, aes(x=Current, y=Capacitance))+
geom_point()+
geom_line()
kable(cp_results,digits =3)
cp_result
# plot data
ggplot(data = tidy_dat, aes(x=time, y=potential, color = current))+
geom_point(size=1)+
geom_line(aes(group=current),size=1.5)+
theme_bw()
sub = cp_df[,(2*i-1):(2*i)]
cp_sheet="Sheet1" # Sheet name in Excel file for CP
cp_result=read_xlsx(filename,sheet=cp_sheet, col_names=FALSE)
cp_result
cp_df=data.frame(cp_result)
# generate tidy version data
for (i in 1:length(cp_i)){
new_sub_df_name = paste0("subframe", i)
sub = cp_df[,(2*i-1):(2*i)]
names(sub)<-c("time", "potential")
sub[,1]=sub[,1]-sub[1,1]
sub<-na.omit(sub)
sub<-mutate(sub, current = cp_i[i])
sub$current=as.factor(sub$current)
assign(new_sub_df_name, sub)
}
tidy_dat<-rbind(subframe1,subframe2,subframe3,subframe4,subframe5)
# plot data
ggplot(data = tidy_dat, aes(x=time, y=potential, color = current))+
geom_point(size=1)+
geom_line(aes(group=current),size=1.5)+
theme_bw()
# calculation
cp_results <- as.data.frame(matrix(nrow = length(cp_i), ncol=5))
names(cp_results)<-c("Current","Capacitance","Areal","Weight","Volume")
for (i in 1:length(cp_i)){
a<-tidy_dat[which(tidy_dat$current==cp_i[i]),]
max_potential<-max(a$potential)
max_time<-tidy_dat[which(tidy_dat$potential==max_potential),]$time
last_index<-nrow(a)
min_time<-a[last_index,1]
cap_cp <- (min_time-max_time)*cp_i[i]/(cp_v[2]-cp_v[1])/1000
cp_results[i,1]=cp_i[i]
cp_results[i,2]=cap_cp
cp_results[i,3]=cap_cp/size
cp_results[i,4]=cap_cp/weight
cp_results[i,5]=cap_cp/volume
}
ggplot(data=cp_results, aes(x=Current, y=Capacitance))+
geom_point()+
geom_line()
kable(cp_results,digits =3)
row=data.frame(c(0,0,cp_i[i]))
sub = cp_df[,(2*i-1):(2*i)]
names(sub)<-c("time", "potential")
cp_sheet="Sheet1" # Sheet name in Excel file for CP
cp_result=read_xlsx(filename,sheet=cp_sheet, col_names=FALSE)
cp_result
cp_df=data.frame(cp_result)
# generate tidy version data
for (i in 1:length(cp_i)){
new_sub_df_name = paste0("subframe", i)
row=data.frame(c(0,0,cp_i[i]))
sub = cp_df[,(2*i-1):(2*i)]
names(sub)<-c("time", "potential")
sub[,1]=sub[,1]-sub[1,1]
sub[1,2]=0
sub=rbind(row, sub)
sub<-na.omit(sub)
sub<-mutate(sub, current = cp_i[i])
sub$current=as.factor(sub$current)
assign(new_sub_df_name, sub)
}
row
new_sub_df_name = paste0("subframe", i)
row=data.frame(c(0,0,cp_i[i]))
cp_sheet="Sheet1" # Sheet name in Excel file for CP
cp_result=read_xlsx(filename,sheet=cp_sheet, col_names=FALSE)
cp_result
cp_df=data.frame(cp_result)
# generate tidy version data
for (i in 1:length(cp_i)){
new_sub_df_name = paste0("subframe", i)
sub = cp_df[,(2*i-1):(2*i)]
names(sub)<-c("time", "potential")
sub[,1]=sub[,1]-sub[1,1]
sub[1,2]=0
sub<-na.omit(sub)
sub<-mutate(sub, current = cp_i[i])
sub$current=as.factor(sub$current)
assign(new_sub_df_name, sub)
}
tidy_dat<-rbind(subframe1,subframe2,subframe3,subframe4,subframe5)
# plot data
ggplot(data = tidy_dat, aes(x=time, y=potential, color = current))+
geom_point(size=1)+
geom_line(aes(group=current),size=1.5)+
theme_bw()
# calculation
cp_results <- as.data.frame(matrix(nrow = length(cp_i), ncol=5))
names(cp_results)<-c("Current","Capacitance","Areal","Weight","Volume")
for (i in 1:length(cp_i)){
a<-tidy_dat[which(tidy_dat$current==cp_i[i]),]
max_potential<-max(a$potential)
max_time<-tidy_dat[which(tidy_dat$potential==max_potential),]$time
last_index<-nrow(a)
min_time<-a[last_index,1]
cap_cp <- (min_time-max_time)*cp_i[i]/(cp_v[2]-cp_v[1])/1000
cp_results[i,1]=cp_i[i]
cp_results[i,2]=cap_cp
cp_results[i,3]=cap_cp/size
cp_results[i,4]=cap_cp/weight
cp_results[i,5]=cap_cp/volume
}
ggplot(data=cp_results, aes(x=Current, y=Capacitance))+
geom_point()+
geom_line()
kable(cp_results,digits =3)
cp_sheet="Sheet1" # Sheet name in Excel file for CP
cp_result=read_xlsx(filename,sheet=cp_sheet, col_names=FALSE)
cp_result
cp_df=data.frame(cp_result)
# generate tidy version data
for (i in 1:length(cp_i)){
new_sub_df_name = paste0("subframe", i)
sub = cp_df[,(2*i-1):(2*i)]
names(sub)<-c("time", "potential")
sub[,1]=sub[,1]-sub[1,1]
sub[1,2]=0
sub<-na.omit(sub)
sub<-mutate(sub, current = cp_i[i])
sub$current=as.factor(sub$current)
assign(new_sub_df_name, sub)
}
tidy_dat<-rbind(subframe1,subframe2,subframe3,subframe4,subframe5)
tidy_dat
# plot data
ggplot(data = tidy_dat, aes(x=time, y=potential, color = current))+
geom_point(size=1)+
geom_line(aes(group=current),size=1.5)+
theme_bw()
# calculation
cp_results <- as.data.frame(matrix(nrow = length(cp_i), ncol=5))
names(cp_results)<-c("Current","Capacitance","Areal","Weight","Volume")
for (i in 1:length(cp_i)){
a<-tidy_dat[which(tidy_dat$current==cp_i[i]),]
max_potential<-max(a$potential)
max_time<-tidy_dat[which(tidy_dat$potential==max_potential),]$time
last_index<-nrow(a)
min_time<-a[last_index,1]
cap_cp <- (min_time-max_time)*cp_i[i]/(cp_v[2]-cp_v[1])/1000
cp_results[i,1]=cp_i[i]
cp_results[i,2]=cap_cp
cp_results[i,3]=cap_cp/size
cp_results[i,4]=cap_cp/weight
cp_results[i,5]=cap_cp/volume
}
ggplot(data=cp_results, aes(x=Current, y=Capacitance))+
geom_point()+
geom_line()
kable(cp_results,digits =3)
subframe1
row<-c(0,0,60)
subframe1
a<-rbind(row,subframe1)
a
row<-c(0,0,subframe1[1,3])
subframe1
a<-rbind(row,subframe1)
a
row
subframe1
cp_sheet="Sheet1" # Sheet name in Excel file for CP
cp_result=read_xlsx(filename,sheet=cp_sheet, col_names=FALSE)
cp_result
cp_df=data.frame(cp_result)
# generate tidy version data
for (i in 1:length(cp_i)){
new_sub_df_name = paste0("subframe", i)
sub = cp_df[,(2*i-1):(2*i)]
names(sub)<-c("time", "potential")
sub[,1]=sub[,1]-sub[1,1]
sub[1,2]=0
sub<-na.omit(sub)
row<-c(0,0)
sub<-rbind(row, sub)
sub<-mutate(sub, current = cp_i[i])
sub$current=as.factor(sub$current)
assign(new_sub_df_name, sub)
}
tidy_dat<-rbind(subframe1,subframe2,subframe3,subframe4,subframe5)
subframe1
# plot data
ggplot(data = tidy_dat, aes(x=time, y=potential, color = current))+
geom_point(size=1)+
geom_line(aes(group=current),size=1.5)+
theme_bw()
# calculation
cp_results <- as.data.frame(matrix(nrow = length(cp_i), ncol=5))
names(cp_results)<-c("Current","Capacitance","Areal","Weight","Volume")
for (i in 1:length(cp_i)){
a<-tidy_dat[which(tidy_dat$current==cp_i[i]),]
max_potential<-max(a$potential)
max_time<-tidy_dat[which(tidy_dat$potential==max_potential),]$time
last_index<-nrow(a)
min_time<-a[last_index,1]
cap_cp <- (min_time-max_time)*cp_i[i]/(cp_v[2]-cp_v[1])/1000
cp_results[i,1]=cp_i[i]
cp_results[i,2]=cap_cp
cp_results[i,3]=cap_cp/size
cp_results[i,4]=cap_cp/weight
cp_results[i,5]=cap_cp/volume
}
ggplot(data=cp_results, aes(x=Current, y=Capacitance))+
geom_point()+
geom_line()
kable(cp_results,digits =3)
cp_sheet="Sheet1" # Sheet name in Excel file for CP
cp_result=read_xlsx(filename,sheet=cp_sheet, col_names=FALSE)
cp_result
cp_df=data.frame(cp_result)
# generate tidy version data
for (i in 1:length(cp_i)){
new_sub_df_name = paste0("subframe", i)
sub = cp_df[,(2*i-1):(2*i)]
names(sub)<-c("time", "potential")
sub[,1]=sub[,1]-sub[1,1]
sub[1,1]=0.25
sub<-na.omit(sub)
row<-c(0,0)
sub<-rbind(row, sub)
sub<-mutate(sub, current = cp_i[i])
sub$current=as.factor(sub$current)
assign(new_sub_df_name, sub)
}
tidy_dat<-rbind(subframe1,subframe2,subframe3,subframe4,subframe5)
subframe1
# plot data
ggplot(data = tidy_dat, aes(x=time, y=potential, color = current))+
geom_point(size=1)+
geom_line(aes(group=current),size=1.5)+
theme_bw()
# calculation
cp_results <- as.data.frame(matrix(nrow = length(cp_i), ncol=5))
names(cp_results)<-c("Current","Capacitance","Areal","Weight","Volume")
for (i in 1:length(cp_i)){
a<-tidy_dat[which(tidy_dat$current==cp_i[i]),]
max_potential<-max(a$potential)
max_time<-tidy_dat[which(tidy_dat$potential==max_potential),]$time
last_index<-nrow(a)
min_time<-a[last_index,1]
cap_cp <- (min_time-max_time)*cp_i[i]/(cp_v[2]-cp_v[1])/1000
cp_results[i,1]=cp_i[i]
cp_results[i,2]=cap_cp
cp_results[i,3]=cap_cp/size
cp_results[i,4]=cap_cp/weight
cp_results[i,5]=cap_cp/volume
}
ggplot(data=cp_results, aes(x=Current, y=Capacitance))+
geom_point()+
geom_line()
kable(cp_results,digits =3)
subframe1[,1:2]
output<-cbind(subframe1[,1:2],subframe2[,1:2],subframe3[,1:2],subframe4[,1:2],subframe5[,1:2])
cp_df
cp_df_2=cp_df
for (i in 1: length(cp_i)){
cp_df_2[,2*i-1]=cp_df_2[,2*i-1]-cp_df_2[1,1]
}
cp_df_2
cp_df_2=cp_df
for (i in 1: length(cp_i)){
cp_df_2[,2*i-1]=cp_df_2[,2*i-1]-cp_df_2[1,2*i-1]
}
cp_df_2
row_2<-rep(0,2*length(cp_i))
row_2
cp_df_2=cp_df
for (i in 1: length(cp_i)){
cp_df_2[,2*i-1]=cp_df_2[,2*i-1]-cp_df_2[1,2*i-1]
cp_df_2[1,2*i-1]=0.25
}
row_2<-rep(0,2*length(cp_i))
cp_df_2<-rbind(row_2, cp_df_2)
cp_df_2
load("tech_data.Rdata") # load cleaned data from John's code, make sure you have the Rdata file within the working directory
dat<- tech_biom
library(tidyverse)
#library(here)      # directory referencing
#library(readxl)    # reading Excel files
#library(janitor)   # data cleaning
#library(stringr)   # string manipulation
library(tidyr)     # new tidy functions
library(knitr) # kable
#library(modi) # ok for multivariate outlier detection
library(caret)# low variance filter
# missing values
#library(naniar)
#library(knitr)
#library(ggpubr) # ggplot arrangement
#ploting
library(gridExtra)
library(kableExtra)
#outlier
#library(univOutl)
# tree methods
#library(tourr)
#library(RColorBrewer)
library(plotly)
#library(htmltools)
library(rpart)
library(rpart.plot)
library(Rtsne)
library(randomForest)
dat<- tech_biom %>% select (AGE>=19 && AGE <=64)
dat<- tech_biom %>% select (AGE>=19 & AGE <=64)
dat<- tech_biom %>% select (AGEC>=19 & AGEC <=64)
tech_biom
dat<- select (data=tech_biom, AGEC>=19 & AGEC <=64)
dat<-tech_biom %>% select (AGEC)
dat<-tech_biom %>% filter (AGEC >= 19 && AGEC <=64 )
dat
dat %>% select(SMKSTAT)
dat %>% select(SMKSTAT==5)
dat<-tech_biom %>% filter (AGEC >= 19 && AGEC <=64 && SMKSTAT==5)
dat
#tech_biom
dat<-tech_biom %>% filter (AGEC >= 19 && AGEC <=64 && SMKSTAT==5)
dat
#tech_biom
dat<-tech_biom %>% filter (AGEC >= 19 && AGEC <=64)
dat
#tech_biom
dat<-tech_biom %>% filter (AGEC >= 19 && AGEC <=64, SMKSTAT==5)
dat
#tech_biom
dat<-tech_biom %>% filter ((AGEC >= 19 && AGEC <=64), SMKSTAT==5)
dat
#tech_biom
dat<-tech_biom %>% filter ((AGEC >= 19), SMKSTAT==5)
dat
#tech_biom
dat<-tech_biom %>% filter (AGEC >= 19, SMKSTAT==5, AGEC<=64)
dat
str(dat)
interested_variables<-c("BMISC","AGEC")
dat<-dat %>% select (interested_variables)
str(dat)
dat<-dat %>% select (interested_variables)
dat
var_list<-c("BMISC","SEX","AGEC","SYSTOL","DIASTOL","TRIGRESB","FOLATREB","CHOLRESB","LDLRESB","HBA1PREB","GLUCFREB","ALTRESB","HDLCHREB") # add/remove variables that are interested
dat<-dat %>% select (var_list)
load("tech_data.Rdata") # load cleaned data from John's code, make sure you have the Rdata file within the working directory
View(tech_biom)
View(tech_biom)
var_list<-c("BMISC","SEX","AGEC") # add/remove variables that are interested
dat<-dat %>% select (var_list)
#tech_biom
dat<-tech_biom %>% filter (AGEC >= 19, AGEC<=64, SMKSTAT==5)  # filter age and smoke status
var_list<-c("BMISC","SEX","AGEC") # add/remove variables that are interested
dat<-dat %>% select (var_list)
dat
var_list<-c("BMISC","SEX","AGEC","SYSTOL","DIASTOL") # add/remove variables that are interested
dat<-dat %>% select (var_list)
#tech_biom
dat<-tech_biom %>% filter (AGEC >= 19, AGEC<=64, SMKSTAT==5)  # filter age and smoke status
var_list<-c("BMISC","SEX","AGEC","SYSTOL") # add/remove variables that are interested
dat2<-dat %>% select (var_list)
dat2
var_list<-c("BMISC","SEX","AGEC","SYSTOL","DIASTOL","TRIGRESB","FOLATREB","CHOLRESB","LDLRESB","HBA1PREB","GLUCFREB","ALTRESB","HDLCHREB") # add/remove variables that are interested
dat2<-dat %>% select (var_list)
dat2
str(dat2)
str(dat2) # 3488 obs x 13 variables
#tech_biom
dat<-tech_biom %>% filter (AGEC >= 19, AGEC<=64, SMKSTAT==5)  # filter age and smoke status
var_list<-c("BMISC","SEX","AGEC","DIABBC","HCHOLBC","HSUGBC","HYPBC", "SYSTOL","DIASTOL","TRIGRESB","FOLATREB","CHOLRESB","LDLRESB","HBA1PREB","GLUCFREB","ALTRESB","HDLCHREB") # add/remove variables that are interested
dat2<-dat %>% select (var_list) # select columns that we are interested
str(dat2) # 3488 obs x 13 variables
}
# dat3 contains obesity scores that are manually created
dat3<-dat2 %>% mutate(
dia_level = ifelse(DIABBC==5, 0, ifelse(DIABBC==3, 1, ifeles(DIABBC==2, 2, ifelse(DIABBC==1, 3, NA))))
)
# dat3 contains obesity scores that are manually created
dat3<-dat2 %>% mutate(
dia_level = ifelse(DIABBC==5, 0, ifelse(DIABBC==3, 1, ifelse(DIABBC==2, 2, ifelse(DIABBC==1, 3, NA))))
)
dat3
dat3<-dat2 %>% mutate(
dia_score= ifelse(DIABBC==5, 0, ifelse(DIABBC==3, 1, ifelse(DIABBC==2, 2, ifelse(DIABBC==1, 3, NA)))),
cho_score= ifelse(HCHOLBC==5, 0, ifelse(HCHOLBC==3, 1, ifelse(HCHOLBC==2, 2, ifelse(HCHOLBC==1, 3, NA)))),
sug_score= ifelse(HSUGBC==5, 0, ifelse(HSUGBC==3, 1, ifelse(HSUGBC==2, 2, ifelse(HSUGBC==1, 3, NA)))),
hyp_score= ifelse(HYPBC==5, 0, ifelse(HYPBC==3, 1, ifelse(HYPBC==2, 2, ifelse(HYPBC==1, 3, NA)))),
)
dat3
hist(dat3$dia_score)
hist(dat3$cho_score)
hist(dat3$sug_score)
hist(dat3$hyp_score)
hist(dat3)
hist(dat3$dia_score)
hist(dat3$cho_score)
hist(dat3$sug_score)
hist(dat3$hyp_score)
#library(htmltools)
library(DMwR2)
install.packages('performanceEstimation')
#outlier
#library(univOutl)
# tree methods
#library(tourr)
#library(RColorBrewer)
#library(plotly)
#library(htmltools)
library(performanceEstimation)# for SMOTE
smote(dia_score~., dat3, perc.over=2, k=5, perc.under =2)
a<-smote(dia_score~., dat3, perc.over=2, k=5, perc.under =2)
a
hist(a $dia_score)
hist(a$dia_score)
a$dia_score
a<-smote(dia_score~., dat3, perc.over=2, k=5, perc.under =6)
a
a$dia_score
a<-smote(dia_score~., dat3, perc.over=2, k=5, perc.under =20)
a$dia_score
dat3$dia_score
table(a)
table(a$dia_score)
table(dat3$dia_score)
table(a$dia_score)
a<-smote(dia_score~., dat3, perc.over=20, k=5, perc.under =20)
table(a$dia_score)
dat3<-dat2 %>% mutate(
dia_score= ifelse(DIABBC==5, 0, ifelse(DIABBC==3, 1, ifelse(DIABBC==2, 2, ifelse(DIABBC==1, 3, NA)))),
cho_score= ifelse(HCHOLBC==5, 0, ifelse(HCHOLBC==3, 1, ifelse(HCHOLBC==2, 2, ifelse(HCHOLBC==1, 3, NA)))),
sug_score= ifelse(HSUGBC==5, 0, ifelse(HSUGBC==3, 1, ifelse(HSUGBC==2, 2, ifelse(HSUGBC==1, 3, NA)))),
hyp_score= ifelse(HYPBC==5, 0, ifelse(HYPBC==3, 1, ifelse(HYPBC==2, 2, ifelse(HYPBC==1, 3, NA)))),
final_score = dia_score+cho_score+sug_score+hyp_score
)
table(dat3$dia_score)
table(dat3$final_score)
a<-smote(dia_score~., dat3, perc.over=20, k=5, perc.under =20)
a<-smote(final_score~., dat3, perc.over=20, k=5, perc.under =20)
table(a$dia_score)
table(a$final_score)
hist(dat3$final_score)
View(dat2)
hist(dat3$final_score)
dat3[which(dat3$final_score==0),]
length(dat3[which(dat3$final_score==0),]) # the final score of 2790 observations are 0
nrows(dat3[which(dat3$final_score==0),]) # the final score of 2790 observations are 0
nrow(dat3[which(dat3$final_score==0),]) # the final score of 2790 observations are 0
library(neuralnet)
install.packages('neuralnet')
library(neuralnet)
neuralnet(final_score~., data = dat3, hidden =7)
library(e1071)# SVM regression
svm_model<-svm(final_score~., data=dat3)
svm_model
training.data<-dat3[1:2000,]
testing.data<-dat3[2001:,]
testing.data<-dat3[2001:nrow(dat3),]
svm_model<-svm(final_score~.-dia_score-cho_score-sug_score-hyp_score-DIABBC-HSHOLBC-HSUGBC-HYPBC, data=dat3)
svm_model<-svm(final_score~.-dia_score-cho_score-sug_score-hyp_score-DIABBC-HSHLBC-HSUGBC-HYPBC, data=dat3)
svm_model<-svm(final_score~.-dia_score-cho_score-sug_score-hyp_score-DIABBC-HCHOLBC-HSUGBC-HYPBC, data=dat3)
svm_model
predict(svm_model, dat3)
predYsvm<-predict(svm_model, dat3)
points(data$X, predYsvm)
summary(predYsvm)
svm_model<-svm(final_score~.-dia_score-cho_score-sug_score-hyp_score-DIABBC-HCHOLBC-HSUGBC-HYPBC, data=training.data)
predYsvm<-predict(svm_model, testing.data)
plot(dat3$final_score, predYsvm)
plot(testing.data$final_score, predYsvm)
predYsvm
testing.data$final_score
predYsvm
